// Get current location coordinates using Geolocation API
function getCurrentLocation() {
    return new Promise((resolve, reject) => {
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          position => {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            resolve({ latitude, longitude });
          },
          error => {
            reject(error);
          }
        );
      } else {
        reject(new Error('Geolocation is not supported by this browser.'));
      }
    });
  }
  
  // Fetch hospital data
  function fetchHospitalData() {
    return new Promise((resolve, reject) => {
      // Sample dataset of 10 hospitals
      const hospitals = [
        {
          name: 'Hospital A',
          address: '123 Main St, City',
          phone: 7365937592,
          latitude: 37.7895,
          longitude: -122.3942
        },
        {
          name: 'Hospital B',
          address: '456 Elm St, City',
          phone: 8562547594,
          latitude: 37.7749,
          longitude: -122.4194
        },
        // Add more hospitals here...
      ];
  
      resolve(hospitals);
    });
  }
  
  // Calculate distance between two sets of coordinates using Haversine formula
  function calculateDistance(lat1, lon1, lat2, lon2) {
    const R = 6371; // Radius of the Earth in kilometers
    const dLat = deg2rad(lat2 - lat1);
    const dLon = deg2rad(lon2 - lon1);
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
      Math.sin(dLon / 2) * Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    return distance;
  }
  
  function deg2rad(deg) {
    return deg * (Math.PI / 180);
  }
  
  // Find nearby hospitals
  function findNearbyHospitals(userLocation, hospitals) {
    const radius = 5; // Search radius in kilometers
    const nearbyHospitals = hospitals.filter(hospital => {
      const distance = calculateDistance(
        userLocation.latitude,
        userLocation.longitude,
        hospital.latitude,
        hospital.longitude
      );
      return distance <= radius;
    });
    return nearbyHospitals;
  }
  
  // Initialize the map and display nearby hospitals
  function initializeMap(userLocation, nearbyHospitals) {
    const map = L.map('map').setView([userLocation.latitude, userLocation.longitude], 12);
  
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; OpenStreetMap contributors',
      maxZoom: 18
    }).addTo(map);
  
    // Add a marker for the user's current location
    const userMarker = L.marker([userLocation.latitude, userLocation.longitude]).addTo(map);
    userMarker.bindPopup('Your Location');
  
    // Add markers for nearby hospitals
    nearbyHospitals.forEach(hospital => {
      const marker = L.marker([hospital.latitude, hospital.longitude]).addTo(map);
      marker.bindPopup(`<b>${hospital.name}</b><br>${hospital.address}<br>${hospital.phone}`);
    });
  }
  
  // Main function
  function main() {
    getCurrentLocation()
      .then(userLocation => {
        fetchHospitalData()
          .then(hospitals => {
            const nearbyHospitals = findNearbyHospitals(userLocation, hospitals);
            initializeMap(userLocation, nearbyHospitals);
          })
          .catch(error => {
            console.log('An error occurred while fetching hospital data:', error);
          });
      })
      .catch(error => {
        console.log('An error occurred while retrieving the current location:', error);
      });
  }
  
  // Run the main function
  main();
  